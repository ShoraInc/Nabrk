// components/admin/blocks/BlockPreview.js
import React from 'react';
import { BLOCK_TYPES_CONFIG } from '../../../config/blockTypesConfig';
import { useLanguage } from '../../../context/LanguageContext';
import useMobileDetection from '../../../hooks/useMobileDetection';
import TitleBlock from './admin/AdminTitleBlock';
import AdminLineBlock from './admin/AdminLineBlock';
import AdminContactInfoBlock from './admin/AdminContactInfoBlock';

const BlockPreview = ({ block }) => {
  const { currentLanguage } = useLanguage();
  const isMobile = useMobileDetection();

  const renderBlockPreview = () => {
    switch (block.type) {
      case 'title':
        return (
          <TitleBlock
            block={block}
            currentLanguage={currentLanguage}
            isMobile={isMobile}
          />
        );
      
      case 'line':
        return (
          <AdminLineBlock
            block={block}
            isMobile={isMobile}
          />
        );
      
      case 'contact-info':
        return (
          <AdminContactInfoBlock
            block={block}
            currentLanguage={currentLanguage}
          />
        );
      
      default:
        return (
          <div className="bg-yellow-50 border border-yellow-200 rounded p-4">
            <div className="flex items-center">
              <span className="text-yellow-500 mr-2">‚ö†Ô∏è</span>
              <span className="text-yellow-800">
                –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —Ç–∏–ø–∞ –±–ª–æ–∫–∞ "{block.type}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
              </span>
            </div>
          </div>
        );
    }
  };

  const config = BLOCK_TYPES_CONFIG[block.type];

  const getTranslationsInfo = () => {
    if (!config?.hasTranslations) return '–ù–µ—Ç';
    
    switch (block.type) {
      case 'title':
        return Object.keys(block.data?.translations || {}).join(', ') || '–ù–µ—Ç';
      
      case 'contact-info':
        const titleLangs = block.data?.title ? 
          Object.keys(block.data.title).filter(lang => block.data.title[lang]) : [];
        const itemsLangs = block.items ? 
          new Set(block.items.flatMap(item => 
            Object.keys(item.data?.texts || {}).filter(lang => item.data.texts[lang])
          )) : new Set();
        
        const allLangs = new Set([...titleLangs, ...itemsLangs]);
        return allLangs.size > 0 ? Array.from(allLangs).join(', ') : '–ù–µ—Ç';
      
      default:
        return '–ù–µ—Ç';
    }
  };

  const getItemsCount = () => {
    if (block.type === 'contact-info') {
      return block.items?.length || 0;
    }
    return null;
  };

  return (
    <div className="space-y-4">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ */}
      <div className="flex flex-wrap gap-4 text-sm text-gray-600 bg-gray-50 p-3 rounded">
        <div>
          <strong>–¢–∏–ø:</strong> {config?.name || block.type}
        </div>
        <div>
          <strong>–ü–æ—Ä—è–¥–æ–∫:</strong> {block.order}
        </div>
        {config?.hasTranslations && (
          <div>
            <strong>–ü–µ—Ä–µ–≤–æ–¥—ã:</strong> {getTranslationsInfo()}
          </div>
        )}
        {getItemsCount() !== null && (
          <div>
            <strong>–≠–ª–µ–º–µ–Ω—Ç–æ–≤:</strong> {getItemsCount()}
          </div>
        )}
        <div>
          <strong>–°–æ–∑–¥–∞–Ω:</strong> {new Date(block.createdAt).toLocaleDateString('ru-RU')}
        </div>
      </div>

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 bg-white">
        <div className="text-xs text-gray-500 mb-2 uppercase tracking-wide">
          –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (—è–∑—ã–∫: {currentLanguage})
        </div>
        <div className="min-h-[40px]">
          {renderBlockPreview()}
        </div>
      </div>

      {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –±–ª–æ–∫–æ–≤ */}
      {block.type === 'contact-info' && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
          <div className="text-sm">
            <div className="font-medium text-blue-800 mb-2">
              üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–º –±–ª–æ–∫–µ
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-blue-700">
              <div>
                <strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong> {
                  block.data?.title?.[currentLanguage] || 
                  block.data?.title?.ru || 
                  '–ù–µ –∑–∞–¥–∞–Ω'
                }
              </div>
              <div>
                <strong>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:</strong> {
                  block.data?.settings?.showTitle ? '–î–∞' : '–ù–µ—Ç'
                }
              </div>
              <div>
                <strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:</strong> {
                  block.data?.settings?.itemSpacing || 'normal'
                }
              </div>
              <div>
                <strong>–†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–æ–∫:</strong> {
                  block.data?.settings?.iconSize || 'medium'
                }
              </div>
            </div>
            {block.items && block.items.length > 0 && (
              <div className="mt-2">
                <strong>–¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</strong> {
                  [...new Set(block.items.map(item => item.type))].join(', ')
                }
              </div>
            )}
          </div>
        </div>
      )}

      {/* –î–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) */}
      {process.env.NODE_ENV === 'development' && (
        <details className="text-sm">
          <summary className="cursor-pointer text-gray-600 hover:text-gray-800">
            üîç –î–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ (dev)
          </summary>
          <pre className="mt-2 bg-gray-100 p-3 rounded text-xs overflow-auto max-h-40">
            {JSON.stringify(block, null, 2)}
          </pre>
        </details>
      )}
    </div>
  );
};

export default BlockPreview;