// components/admin/blocks/forms/ButtonBlockForm.js
import React, { useState, useEffect } from 'react';
import blocksApi from '../../../../api/blocksApi';

const ButtonBlockForm = ({ pageId, editingBlock, onSubmit, onCancel, isHidden }) => {
  const isEditing = !!editingBlock;

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [blockOptions, setBlockOptions] = useState(null);

  // –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    order: 1,
    url: '',
    width: '100%',
    backgroundColor: '#D4AF37', // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ
    textColor: '#000000',
    fontWeight: '600', // –°—Ä–µ–¥–Ω—è—è –∂–∏—Ä–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    marginTop: 0,
    marginBottom: 16,
    isHidden: false,
  });

  // –ü–µ—Ä–µ–≤–æ–¥—ã
  const [translations, setTranslations] = useState({});
  const [currentLang, setCurrentLang] = useState('kz');

  useEffect(() => {
    loadBlockOptions();
  }, []);

  useEffect(() => {
    if (isEditing) {
      loadBlockData();
    }
  }, [isEditing, editingBlock]);

  const loadBlockOptions = async () => {
    try {
      const options = await blocksApi.getBlockOptions();
      setBlockOptions(options);
    } catch (err) {
      console.error('Error loading block options:', err);
    }
  };

  const loadBlockData = () => {
    if (!editingBlock) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏ –±–ª–æ–∫–∞
    const data = editingBlock.data || {};
    setFormData({
      order: editingBlock.order || 0,
      url: data.url || '',
      width: data.width || '100%',
      backgroundColor: data.backgroundColor || '#D4AF37',
      textColor: data.textColor || '#000000',
      fontWeight: data.fontWeight || '600',
      marginTop: data.marginTop || 0,
      marginBottom: data.marginBottom || 16,
      isHidden: editingBlock.isHidden || false,
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    setTranslations(data.translations || {});
  };

  const handleStyleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleTranslationChange = (lang, text) => {
    setTranslations(prev => ({
      ...prev,
      [lang]: text
    }));
  };

  const getCurrentTranslation = () => {
    return translations[currentLang] || '';
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const currentText = getCurrentTranslation();
    if (!currentText || !currentText.trim()) {
      setError('–¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      return;
    }

    try {
      setLoading(true);
      setError(null);

      if (isEditing) {
        // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ

        // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –±–ª–æ–∫–∞
        await blocksApi.updateButtonBlock(editingBlock.id, formData);

        // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        for (const [lang, text] of Object.entries(translations)) {
          if (text && text.trim()) {
            await blocksApi.upsertButtonTranslation(editingBlock.id, lang, text.trim());
          }
        }

        onSubmit();
      } else {
        // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        const blockData = {
          pageId: parseInt(pageId),
          text: currentText.trim(),
          language: currentLang,
          ...formData,
        };

        const newBlock = await blocksApi.createButtonBlock(blockData);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        for (const [lang, text] of Object.entries(translations)) {
          if (lang !== currentLang && text && text.trim()) {
            await blocksApi.upsertButtonTranslation(newBlock.id, lang, text.trim());
          }
        }

        onSubmit(newBlock);
      }
    } catch (err) {
      setError(err.message);
      console.error('Error saving button block:', err);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –∏–∑ –æ–ø—Ü–∏–π
  const getLanguages = () => {
    if (!blockOptions?.languages) return [];

    const languageNames = {
      'en': 'English',
      'ru': '–†—É—Å—Å–∫–∏–π',
      'kz': '“ö–∞–∑–∞“õ—à–∞'
    };

    return blockOptions.languages.map(code => ({
      code,
      name: languageNames[code] || code.toUpperCase()
    }));
  };

  if (!blockOptions) {
    return (
      <div className="flex justify-center items-center py-8">
        <div className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ü–∏–π...</div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      {/* –ü–µ—Ä–µ–≤–æ–¥—ã */}
      <div className="bg-blue-50 p-4 rounded-lg">
        <h4 className="font-semibold text-gray-800 mb-4">üìù –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</h4>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–æ–≤ */}
        <div className="flex flex-wrap gap-2 mb-4">
          {getLanguages().map((lang) => (
            <button
              key={lang.code}
              type="button"
              onClick={() => setCurrentLang(lang.code)}
              className={`px-3 py-2 rounded font-medium text-sm transition-colors ${currentLang === lang.code
                  ? 'bg-blue-600 text-white'
                  : 'bg-white text-gray-700 hover:bg-gray-100 border'
                }`}
            >
              {lang.name}
              {translations[lang.code] && (
                <span className="ml-1 text-green-500">‚úì</span>
              )}
            </button>
          ))}
        </div>

        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¢–µ–∫—Å—Ç –Ω–∞ {getLanguages().find(l => l.code === currentLang)?.name}:
          </label>
          <input
            type="text"
            value={getCurrentTranslation()}
            onChange={(e) => handleTranslationChange(currentLang, e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder={`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ ${getLanguages().find(l => l.code === currentLang)?.name}...`}
            required={currentLang === 'kz'} // –ö–∞–∑–∞—Ö—Å–∫–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
          />
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* –ü–æ—Ä—è–¥–æ–∫ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ü–æ—Ä—è–¥–æ–∫
          </label>
          <input
            type="number"
            value={formData.order}
            onChange={(e) => handleStyleChange('order', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min="0"
          />
        </div>

        {/* URL */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –°—Å—ã–ª–∫–∞ (URL)
          </label>
          <input
            type="url"
            value={formData.url}
            onChange={(e) => handleStyleChange('url', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="https://example.com –∏–ª–∏ /internal-page"
          />
        </div>

        {/* –®–∏—Ä–∏–Ω–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –®–∏—Ä–∏–Ω–∞
          </label>
          <select
            value={formData.width}
            onChange={(e) => handleStyleChange('width', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {blockOptions.button?.widthOptions?.map((width) => (
              <option key={width} value={width}>
                {width}
              </option>
            ))}
          </select>
        </div>

        {/* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¶–≤–µ—Ç —Ñ–æ–Ω–∞
          </label>
          <div className="flex items-center space-x-2">
            <input
              type="color"
              value={formData.backgroundColor}
              onChange={(e) => handleStyleChange('backgroundColor', e.target.value)}
              className="w-12 h-10 border border-gray-300 rounded cursor-pointer"
            />
            <select
              value={formData.backgroundColor}
              onChange={(e) => handleStyleChange('backgroundColor', e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {blockOptions.button?.backgroundColors?.map((color) => (
                <option key={color} value={color}>
                  {color} {color === '#D4AF37' ? '(–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π)' : ''}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
          </label>
          <div className="flex items-center space-x-2">
            <input
              type="color"
              value={formData.textColor}
              onChange={(e) => handleStyleChange('textColor', e.target.value)}
              className="w-12 h-10 border border-gray-300 rounded cursor-pointer"
            />
            <select
              value={formData.textColor}
              onChange={(e) => handleStyleChange('textColor', e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {blockOptions.button?.textColors?.map((color) => (
                <option key={color} value={color}>
                  {color === '#000000' ? '–ß–µ—Ä–Ω—ã–π' : color === '#FFFFFF' ? '–ë–µ–ª—ã–π' : color}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* –¢–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¢–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞
          </label>
          <select
            value={formData.fontWeight}
            onChange={(e) => handleStyleChange('fontWeight', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {blockOptions.button?.fontWeights?.map((weight) => (
              <option key={weight} value={weight}>
                {weight === '300' ? '–¢–æ–Ω–∫–∏–π (300)' :
                 weight === '400' ? '–û–±—ã—á–Ω—ã–π (400)' :
                 weight === '500' ? '–°—Ä–µ–¥–Ω–∏–π (500)' :
                 weight === '600' ? '–ü–æ–ª—É–∂–∏—Ä–Ω—ã–π (600)' :
                 weight === '700' ? '–ñ–∏—Ä–Ω—ã–π (700)' :
                 weight === '800' ? '–û—á–µ–Ω—å –∂–∏—Ä–Ω—ã–π (800)' : weight}
              </option>
            ))}
          </select>
        </div>

        {/* –û—Ç—Å—Ç—É–ø—ã */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É (px)
          </label>
          <input
            type="number"
            value={formData.marginTop}
            onChange={(e) => handleStyleChange('marginTop', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min={blockOptions.button?.marginRange?.min || 0}
            max={blockOptions.button?.marginRange?.max || 200}
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É (px)
          </label>
          <input
            type="number"
            value={formData.marginBottom}
            onChange={(e) => handleStyleChange('marginBottom', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min={blockOptions.button?.marginRange?.min || 0}
            max={blockOptions.button?.marginRange?.max || 200}
          />
        </div>
      </div>

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h4 className="font-semibold text-gray-800 mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</h4>
        <div style={{ display: 'flex', justifyContent: 'center' }}>
          <button
            type="button"
            style={{
              width: formData.width,
              maxWidth: '300px',
              padding: '16px 24px',
              backgroundColor: formData.backgroundColor,
              color: formData.textColor,
              border: 'none',
              fontSize: '16px',
              fontWeight: '600',
              fontFamily: "'Roboto Flex', sans-serif",
              cursor: 'pointer',
              boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            }}
          >
            {getCurrentTranslation() || '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏'}
          </button>
        </div>
      </div>

      {/* –ß–µ–∫–±–æ–∫—Å —Å–∫—Ä—ã—Ç–æ–≥–æ –±–ª–æ–∫–∞ */}
      <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
        <label className="flex items-center">
          <input
            type="checkbox"
            checked={formData.isHidden}
            onChange={e => setFormData(prev => ({ ...prev, isHidden: e.target.checked }))}
            className="mr-2"
          />
          <span className="text-sm text-yellow-800">
            –°–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ (–Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
          </span>
        </label>
        <p className="text-xs text-yellow-600 mt-1">
          –°–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
        </p>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <div className="flex space-x-4 pt-4 border-t">
        <button
          type="submit"
          disabled={loading}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (isEditing ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
        </button>
        <button
          type="button"
          onClick={onCancel}
          className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-medium transition-colors"
        >
          –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    </form>
  );
};

export default ButtonBlockForm;
