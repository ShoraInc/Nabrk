// components/admin/blocks/forms/LineBlockForm.js
import React, { useState, useEffect } from 'react';
import blocksApi from '../../../../api/blocksApi';

const LineBlockForm = ({ pageId, editingBlock, onSubmit, onCancel, isHidden }) => {
  const isEditing = !!editingBlock;
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [blockOptions, setBlockOptions] = useState(null);
  
  const [formData, setFormData] = useState({
    order: 1,
    color: '#000000',
    height: 1,
    width: '100%',
    style: 'solid',
    marginTop: 0,
    marginBottom: 0,
    isHidden: false, // <-- –¥–æ–±–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  });

  useEffect(() => {
    loadBlockOptions();
  }, []);

  useEffect(() => {
    if (isEditing && editingBlock) {
      const data = editingBlock.data || {};
      setFormData({
        order: editingBlock.order || 0,
        color: data.color || '#000000',
        height: data.height || 1,
        width: data.width || '100%',
        style: data.style || 'solid',
        marginTop: data.marginTop || 0,
        marginBottom: data.marginBottom || 0,
        isHidden: editingBlock.isHidden || false, // <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
      });
    }
  }, [isEditing, editingBlock]);

  const loadBlockOptions = async () => {
    try {
      const options = await blocksApi.getBlockOptions();
      setBlockOptions(options);
    } catch (err) {
      console.error('Error loading block options:', err);
    }
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø—Ü–∏–π –∏–∑ API
    const heightRange = blockOptions?.line?.heightRange;
    const marginRange = blockOptions?.line?.marginRange;

    if (heightRange && (formData.height < heightRange.min || formData.height > heightRange.max)) {
      setError(`–í—ã—Å–æ—Ç–∞ –ª–∏–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${heightRange.min} –¥–æ ${heightRange.max} –ø–∏–∫—Å–µ–ª–µ–π`);
      return;
    }

    if (marginRange && (formData.marginTop < marginRange.min || formData.marginTop > marginRange.max)) {
      setError(`–û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${marginRange.min} –¥–æ ${marginRange.max} –ø–∏–∫—Å–µ–ª–µ–π`);
      return;
    }

    if (marginRange && (formData.marginBottom < marginRange.min || formData.marginBottom > marginRange.max)) {
      setError(`–û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${marginRange.min} –¥–æ ${marginRange.max} –ø–∏–∫—Å–µ–ª–µ–π`);
      return;
    }

    try {
      setLoading(true);
      setError(null);

      if (isEditing) {
        const updatedBlock = await blocksApi.updateLineBlock(editingBlock.id, formData);
        onSubmit(updatedBlock);
      } else {
        const blockData = {
          pageId: parseInt(pageId),
          isHidden: isHidden || false, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–∫—Ä—ã—Ç–æ–≥–æ –±–ª–æ–∫–∞
          ...formData,
        };
        const newBlock = await blocksApi.createLineBlock(blockData);
        onSubmit(newBlock);
      }
    } catch (err) {
      setError(err.message);
      console.error('Error saving line block:', err);
    } finally {
      setLoading(false);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ —à–∏—Ä–∏–Ω—ã
  const getWidthOptions = () => {
    if (!blockOptions?.line?.width) return [];

    const widthDescriptions = {
      '25%': '–ß–µ—Ç–≤–µ—Ä—Ç—å',
      '50%': '–ü–æ–ª–æ–≤–∏–Ω–∞', 
      '75%': '–¢—Ä–∏ —á–µ—Ç–≤–µ—Ä—Ç–∏',
      '100%': '–ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞'
    };

    return blockOptions.line.width.map(width => ({
      value: width,
      label: `${width} - ${widthDescriptions[width] || width}`
    }));
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ —Å—Ç–∏–ª—è
  const getStyleOptions = () => {
    if (!blockOptions?.line?.style) return [];

    const styleDescriptions = {
      'solid': '–°–ø–ª–æ—à–Ω–∞—è',
      'dashed': '–ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è',
      'dotted': '–¢–æ—á–µ—á–Ω–∞—è'
    };

    return blockOptions.line.style.map(style => ({
      value: style,
      label: styleDescriptions[style] || style
    }));
  };

  if (!blockOptions) {
    return (
      <div className="flex justify-center items-center py-8">
        <div className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ü–∏–π...</div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h4 className="font-semibold text-gray-800 mb-3">üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</h4>
        <div className="bg-white p-4 rounded border-2 border-dashed border-gray-300">
          <hr 
            style={{
              width: formData.width,
              height: '0px',
              backgroundColor: 'transparent',
              border: 'none',
              borderTop: `${formData.height}px ${formData.style} ${formData.color}`,
              marginTop: `${formData.marginTop}px`,
              marginBottom: `${formData.marginBottom}px`,
              marginLeft: 'auto',
              marginRight: 'auto',
              padding: 0
            }}
          />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* –ü–æ—Ä—è–¥–æ–∫ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ü–æ—Ä—è–¥–æ–∫
          </label>
          <input
            type="number"
            value={formData.order}
            onChange={(e) => handleChange('order', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min="0"
          />
          <p className="text-xs text-gray-500 mt-1">
            –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          </p>
        </div>

        {/* –¶–≤–µ—Ç */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¶–≤–µ—Ç –ª–∏–Ω–∏–∏
          </label>
          <div className="flex items-center space-x-2">
            <input
              type="color"
              value={formData.color}
              onChange={(e) => handleChange('color', e.target.value)}
              className="w-12 h-10 border border-gray-300 rounded cursor-pointer"
            />
            <input
              type="text"
              value={formData.color}
              onChange={(e) => handleChange('color', e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="#000000"
            />
          </div>
        </div>

        {/* –í—ã—Å–æ—Ç–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –í—ã—Å–æ—Ç–∞ –ª–∏–Ω–∏–∏ (px)
          </label>
          <input
            type="number"
            value={formData.height}
            onChange={(e) => handleChange('height', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min={blockOptions.line?.heightRange?.min || 1}
            max={blockOptions.line?.heightRange?.max || 20}
          />
          <p className="text-xs text-gray-500 mt-1">
            –û—Ç {blockOptions.line?.heightRange?.min || 1} –¥–æ {blockOptions.line?.heightRange?.max || 20} –ø–∏–∫—Å–µ–ª–µ–π
          </p>
        </div>

        {/* –®–∏—Ä–∏–Ω–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –®–∏—Ä–∏–Ω–∞ –ª–∏–Ω–∏–∏
          </label>
          <select
            value={formData.width}
            onChange={(e) => handleChange('width', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {getWidthOptions().map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* –°—Ç–∏–ª—å */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –°—Ç–∏–ª—å –ª–∏–Ω–∏–∏
          </label>
          <select
            value={formData.style}
            onChange={(e) => handleChange('style', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {getStyleOptions().map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* –û—Ç—Å—Ç—É–ø—ã */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É (px)
          </label>
          <input
            type="number"
            value={formData.marginTop}
            onChange={(e) => handleChange('marginTop', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min={blockOptions.line?.marginRange?.min || 0}
            max={blockOptions.line?.marginRange?.max || 200}
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É (px)
          </label>
          <input
            type="number"
            value={formData.marginBottom}
            onChange={(e) => handleChange('marginBottom', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min={blockOptions.line?.marginRange?.min || 0}
            max={blockOptions.line?.marginRange?.max || 200}
          />
        </div>
        {/* –ß–µ–∫–±–æ–∫—Å —Å–∫—Ä—ã—Ç–æ–≥–æ –±–ª–æ–∫–∞ ‚Äî —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ */}
        <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={formData.isHidden}
              onChange={e => setFormData(prev => ({ ...prev, isHidden: e.target.checked }))}
              className="mr-2"
            />
            <span className="text-sm text-yellow-800">
              –°–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ (–Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            </span>
          </label>
          <p className="text-xs text-yellow-600 mt-1">
            –°–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
          </p>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <div className="flex space-x-4 pt-4 border-t">
        <button
          type="submit"
          disabled={loading}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (isEditing ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
        </button>
        <button
          type="button"
          onClick={onCancel}
          className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-medium transition-colors"
        >
          –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    </form>
  );
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫ –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –≤ FAQ
async function checkBlockUsedInFaq(blockId) {
  return await blocksApi.checkBlockUsedInFaq(blockId);
}

export default LineBlockForm;