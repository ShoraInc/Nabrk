const { getIncludesForBlockTypes } = require("../blockRegistry");
const sequelize = require("../db");
const { Blocks } = require("../models");
require("../blocksInit");

const blocksController = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
  getBlocksByPageId: async (req, res) => {
    try {

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –±–ª–æ–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const blocks = await Blocks.findAll({
        where: { pageId: req.params.pageId },
        attributes: ["type"],
        group: ["type"],
        raw: true,
      });

      const blockTypes = blocks.map((block) => block.type);

      // –§–æ—Ä–º–∏—Ä—É–µ–º includes –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤
      const includes = getIncludesForBlockTypes(blockTypes);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
      const blocksWithData = await Blocks.findAll({
        where: { pageId: req.params.pageId },
        order: [["order", "ASC"]],
        include: includes,
      });

      res.json(blocksWithData);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫ –ø–æ ID —Å –¥–∞–Ω–Ω—ã–º–∏
  getBlockById: async (req, res) => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –±–ª–æ–∫–∞
      const block = await Blocks.findByPk(req.params.id, {
        attributes: ["id", "type", "pageId", "order"],
      });

      if (!block) {
        return res.status(404).json({ error: "Block not found" });
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º include –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–ª–æ–∫–∞
      const includes = getIncludesForBlockTypes([block.type]);

      // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
      const blockWithData = await Blocks.findByPk(req.params.id, {
        include: includes,
      });

      res.json(blockWithData);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },

  deleteBlock: async (req, res) => {
    console.log("üéØ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Å id:", req.params.id);

    const transaction = await sequelize.transaction();
    try {
      console.log("üìã –ò—â–µ–º –±–ª–æ–∫...");

      const deleted = await Blocks.destroy({
        where: { id: req.params.id },
        transaction,
        individualHooks: true,
      });

      console.log("üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:", deleted);

      if (!deleted) {
        await transaction.rollback();
        return res.status(404).json({ error: "Block not found" });
      }

      await transaction.commit();
      res.json({ message: "Block deleted successfully" });
    } catch (error) {
      await transaction.rollback();
      res.status(500).json({ error: error.message });
    }
  },
};

module.exports = blocksController;
