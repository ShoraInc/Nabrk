const { DataTypes } = require("sequelize");
const sequelize = require("../db");

const ContactInfoItems = sequelize.define("ContactInfoItems", {
  id: { 
    type: DataTypes.INTEGER, 
    primaryKey: true, 
    autoIncrement: true 
  },
  blockId: { 
    type: DataTypes.INTEGER, 
    allowNull: false,
    field: 'block_id',
    references: {
      model: 'Blocks',
      key: 'id'
    },
    onDelete: 'CASCADE'
  },
  type: { 
    type: DataTypes.ENUM('phone', 'email', 'fax', 'file', 'link', 'video', 'address', 'custom'),
    allowNull: false,
    comment: '–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
  },
  icon: {
    type: DataTypes.STRING(50),
    allowNull: false,
    defaultValue: 'info',
    comment: '–ö–ª—é—á –∏–∫–æ–Ω–∫–∏ –∏–∑ Lucide React'
  },
  order: { 
    type: DataTypes.INTEGER, 
    allowNull: false, 
    defaultValue: 0,
    comment: '–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ'
  },
  data: {
    type: DataTypes.JSONB,
    allowNull: false,
    defaultValue: {},
    comment: '–î–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞: —Ç–µ–∫—Å—Ç—ã, —Å—Å—ã–ª–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true,
    field: 'is_active',
    comment: '–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç'
  }
}, {
  tableName: 'ContactInfoItems',
  underscored: true,
  
  indexes: [
    {
      fields: ['block_id', 'order'],
      name: 'contact_info_items_block_order_idx'
    },
    {
      fields: ['type'],
      name: 'contact_info_items_type_idx'
    },
    {
      fields: ['is_active'],
      name: 'contact_info_items_active_idx'
    },
    {
      type: 'GIN',
      fields: ['data'],
      name: 'contact_info_items_data_gin_idx'
    }
  ],
  
  validate: {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    validateBasicStructure() {
      const { data } = this;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!data || typeof data !== 'object') {
        throw new Error('Data field is required and must be an object');
      }
      
      // –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ texts - –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º
      if (data.texts && typeof data.texts !== 'object') {
        throw new Error('Texts field must be an object');
      }
    }
  }
});

// –•—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
ContactInfoItems.addHook('beforeValidate', (item) => {
  // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ—Ä—è–¥–æ–∫, —Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
  if (!item.order && item.order !== 0) {
    return ContactInfoItems.findOne({
      where: { blockId: item.blockId },
      order: [['order', 'DESC']]
    }).then(lastItem => {
      item.order = lastItem ? lastItem.order + 1 : 0;
    });
  }
});

ContactInfoItems.addHook('beforeDestroy', async (item) => {
  console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ—Ç—Å—è ContactInfoItem ID: ${item.id}, type: ${item.type}`);
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
  if (item.type === 'file' && item.data.value) {
    const { deleteFile } = require('../middleware/contactsFilesUploadMiddleware');
    await deleteFile(item.data.value);
  }
});

module.exports = ContactInfoItems;